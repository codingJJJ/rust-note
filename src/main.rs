/**
 * 错误处理概述
 * 错误处理提高了Rust的可靠性
 * 大部分情况下,在编译时提示错误并处理
 * 
 * 错误分类
 *      可恢复错误，比如文件未找到
 *      Rust提供了Result<T, E>
 *      不可恢复，比如索引超出范围
 *      Rust提供了panic!宏
 * pannic!
 * 当panic!执行时，会打印出一个错误信息
 * 同时会展开并清理调用栈然后退出程序
 * 在默认情况，panic发生时会展开调用栈，rust沿着调用栈往回走
 * 清理掉每个遇到的函数中的错误
 * 或者我们可以直接立即中止调用栈，不清理内存
 * 内存需要操作系统进行清理
 * 想让二进制文件更小，可以设置从展开改为中止
 * 在cargo.toml中适当的profile部分设置
 * panic = 'abort
 * 
 * panic可能出现在我们写的代码中，也可能出现在所依赖的代码中
 * 通过调用panic的函数回溯信息可以来定位代码引起的问题
 * 
 * 在运行时，设置RUST_BACKTRACE = 1 可以实现回溯错误信息
 * 即 RUST_BACKTRACE = 1 && cargo run
 * 在运行时，设置RUST_BACJTRACE = full 可以实现所有错误的追溯
*/
fn main () {

}